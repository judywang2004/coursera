1: Git Resources:
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging

2: set up proxy
-- find pac
reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings" 
-- textedit pac, find prox
git config --global http.proxy outbound2.mellonbank.com:8080
git config --global http.proxy http[s]://userName:password(encoded)@proxyaddress:port (never tried)

You can also get the automatic configuration file URL from the registry by running: 
reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Wpad" 



2: add exsiting project to remote
git init
git add -A
git commit -m 'Added my project'
git remote add origin https://github.com/judywang2004/coursera.git
git push -u -f origin master


3: add a subfolder
1.create a folder
2."git add" this folder
3."git commit -m 'message'"
4."git push"


 git add -A stages All
•git add . stages new and modified, without deleted
•git add -u stages modified and deleted, without new



2: Git Operations

 Created by David Payt on May 19, 2015 9:56 AM. Last modified by David Payt on Feb 12, 2016 9:50 AM. 
Version 31 

U160322004221


• Git Tools 
• Git Setup 
• Git Operations • Clone a project 
• Create a Branch 
• Checkout a Branch 
• Stashing Changes 
• Unstash Changes 
• Add Files for Committing 
• Commit Changes to Local Repository 
• Push Changes from Local to Remote 
• Pull Changes from Remote to Local 
• Merging Changes 
• Rebasing 
• Search all commits for a string 
• Find which branches contain a commit 


Getting Started • When you come in in the morning • Starting a new feature from the main development branch
 • Commit • Stage one file for commit 
• Stage all modified files 
• Pushing changes 

• Branch Merging • Merge Requests in GitLab (Preferred) 
• Manual Merging 

• Rebasing 


Advanced Git • How to undo things • Undoing a local commit 
• Undoing a merge 
• Undoing part of a large integration branch 

• Cleaning Up • Cleaning up branches 

 

This document highlights some common git operations. First draft credit goes to Greg Mallett.
 

 Refer to Git - Reference for a complete list of commands and options. Also this cheatsheet.

 Refer to Development Workflow for task-centric workflow instructions.

 
 
Git Tools

Git is a command line tool that can be used directly (via a command line) or indirectly (by a third party tool). The following list are common tools used to interface with git.
•git - the official open-source git toolset (includes git, Git Bash, and Git Gui)
•GUIs - Git Gui, SourceTree and more.
•IDE support - Eclipse, IDEA, Netbeans, and other IDEs have built-in or plug-in support for git

 
 
Git Setup

 
1.Familiarize yourself with our internal git GitLab repositories - http://dev-gitlab.bnymellon.net/•If you do not have access see the GitLab section of NEXEN New Hire Setup


2.Download and install git from http://git-scm.com/download•Leave all options at defaults.

3.Open a "Git Bash" terminal and execute the following commands (replace Your Name with your user details):
 
git config --global user.name "Your Name"
 
git config --global user.email your.name@example.com
 
mkdir ~/nexen-git
 
cd ~/nexen-git
 
ssh-keygen –C “your.name@bnymellon.com”

4.Follow all prompts, leave everything at default value
5.Open ~/.ssh/id_rsa.pub
6.Copy the contents
7.In GitLab, go to your profile's SSH keys: http://dev-gitlab.bnymellon.net/profile/keys1.Click “Add ssh key”
2.Paste contents of ~/.ssh/id_rsa.pub into the key area
3.Click “Add Key”


 
 
Git Operations

The following sections use curly braces { } to indicate values specific to your project.

 
 
Clone a project

Before working on a git project, it must be cloned. Repositories can be found in GitLab - http://dev-gitlab.bnymellon.net/.


 
mkdir git
 
cd git

 
git clone http://dev-gitlab.bnymellon.net/{path}/{project}.git

 
 
Create a Branch

When creating a branch choose an appropriate name that relates to the JIRA task:

 

 Branches that do not follow this naming convention will be rejected by the build master!



From within an existing git project:

 
git checkout –b {branch-name}

 

Newly created branches only exist in the local repository until they are pushed to the remote repository.

 
 
Checkout a Branch

Checking-out branches does not require having multiple clones, as is common in other control systems. Instead, git provides support for switching between branches. When switching between branches you should not have any outstanding changes (consider stashing your changes).

 

 
// Show Current Branch and Local List Branches
 
git branch
 
// Checkout a branch

 
git checkout {branch-name}
 
// If needed, update the branch
 
git pull


 
 
Stashing Changes

git stash save <message>

 
Unstash Changes

 

git stash pop
 
Add Files for Committing

To add a single file to the "stage", so it can be committed:

git add {file}

To add all modified files to the stage:

git add -u



 
Commit Changes to Local Repository

git commit -m "commit message"


 
 
Push Changes from Local to Remote

You need to push in these situations:
•A local branch has not been previously pushed to the remote repository, and you need someone to checkout or merge your branch.
•Locally committed changes need to be pushed to the remote repository.

git push origin {branchname}

 
 
Pull Changes from Remote to Local

To retrieve the changes from the remote branch into a local branch:

git pull 




Update a Branch with Changes from the Main Development Branch

 
 
Merging Changes

 
 
Rebasing
 

Search all commits for a string

The following command searches all commits for a regular expression, regex:

 
git log --all -Sregex --pickaxe-all

 
Find which branches contain a commit

 
git branch --all --contains 81775835aa2a9a8dd7b67a5a7e0d7417c801a0fe
 
 

 

EVERYTHING BELOW THIS LINE IS BEING ABSORBED INTO EITHER THE DEVELOPER WORKFLOW OR INTO THE GIT OPERATIONS ABOVE
 

Getting Started

 

 
 
When you come in in the morning

git checkout release

git pull

git checkout master

git pull

 
 
Starting a new feature from the main development branch

#make sure you are on the release branch and that it is up-to-date before create a new branch

git checkout release

git checkout –b feature/CTSNXN-...-new-feature-name

 
 
Commit
 
Stage one file for commit

git add <file>

 
 
Stage all modified files

git add –u

 
 
Pushing changes

git push origin <branchname>



 
Branch Merging
 
Merge Requests in GitLab (Preferred)

 
 
Manual Merging

If a merge cannot be done in GitLab, because it contains conflicts, then a manual merge must be done.  Let's assume you are working on a feature branch called feature/CTSNXN-99999-some-feature.  If the branch cannot be merged automatically (due to conflicts), perform the following steps below:

 

git fetch

git checkout feature/CTSNXN-99999-some-feature


git merge origin/release





Resolve any conflicts (preferably in a tool like IntellJ) and then commit

 

git push origin feature/CTSNXN-99999-some-feature


 

A merge can be aborted with the following command:

git merge --abort

 
 
Rebasing

Rebasing is my favorite feature. A word of caution first:
•Never rebase the release or the master branches. Rebasing should only be used on your personal feature branches.
•Never rebase a branch that is shared with someone else. Rebasing is very powerful, but you also can break things for everyone else or mess up the history.

 

With rebasing, you can do the following:
•Rewrite History -- If you have a commit which you want to not only revert but eliminate entirely, use rebase.  You can eliminate any number of commits like this from a branch.
•Combine Commits -- When working on a feature branch, you may find yourself committing many small changes in a row.  If they are all related, you can combine them together.  This is called "squashing".  Never squash a merge commit though.

 

To rewrite history

git rebase -i master

 

This will launch a text editor.  To delete a commit, just delete the line.  To squash a commit(s) replace "pick" with "squash".  You can do other things too, like change commit messages, add additional changes to a commit, etc.

 

Sync your branch with develop without merging -- You will sometimes need to sync your feature branch with master, pulling in changes others have pushed.  This can be done with a merge. The downside to doing a merge is that it requires a commit.  With too many merges, you will clutter your history.  The alternative is to use rebase:

 

gt rebase master

 

The above will "rebase" your branch with master, it will be as if you created a new branch off of the current master, but it will have all of the current commits from your feature branch as well.  Be advised you may need to resolve conflicts doing this, just as if it were a merge.

 

To abort a rebase:

git rebase --abort






 
Advanced Git




This section is meant to be a place to store advanced "how-tos".  Git is a powerful set of tools which can be used beyond just branching & merging features and committing changes.



 
How to undo things




We all mess up occasionally. This section should be used to describe how to fix mistakes made using git.




 
Undoing a local commit




If you are working on a local feature branch and you commit changes, it is trivial to undo them.  Just use:




git reset --hard HEAD~1




This goes back 1 commit.  To go back 2 commits, you can use HEAD~2 instead of HEAD~1.


Maybe you committed prematurely.  If you want to change a couple more things in the last commit, that's easy too, just omit the --hard:




git reset HEAD~1


 

A few words of caution regarding reset: it does modify history, so it is safe to use only on local feature branches.  Don't use this with commits already pushed to release.  If you push the feature branch, then use reset, you will need to force push the branch to fix it.  Never force push shared branches and never force push release!




git push -f origin <feature>



 
Undoing a merge





To undo a merge of a feature branch, first find the commit hash for the merge, gitlab will be helpful here.  Next determine which side of the merge is the baseline.  E.g, if you merge into release, you want release to be the baseline.  Now you have enough information to perform the revert:




git revert -m 1 <hash> 

git push origin release





The "-m 1" tells git to use the 1st parent commit (which should be the baseline commit for the release branch) as the baseline.

Note that reverting only undoes the changes.  The commits remain.  After reverting, the feature branch cannot be merged again unless additional steps are taken because Git thinks that it already is merged!  To remedy this, on your feature branch, run the following commands:




git fetch

git merge origin/release

git revert <hash from the other revert>




By reverting the revert, you redo all the changes made in the feature branch and it can once again be merged to release when you are ready.




 
Undoing part of a large integration branch




Large integration branches can be problematic.  Their size can complicate things.  The recommended approach is to keep only one such branch (e.g: a release branch).  If you merge this into another branch and later discover that there are features in there that should not be, this section will explain how to remove them.




First, make sure you have a branch with the correct set of features, e.g: fixed-branch.  Next, use the following command:

git rev-list --grep="into '<wrong branch>'" --merges --reverse fixed-branch..<wrong branch> 

to look for merge commits into the wrong branch that were never merged into the fixed-branch. Essentially, you are finding a set difference between the set of merges in the two branches.  Save the hashes, and use them in a revert command, in the order listed by rev-list:

 

git revert -n -m 1 <hash>

...

 

Here's a shell script for the above (untested):

 

#!/bin/sh

 

for s in $( git rev-list --grep="into '<wrong branch>'" --merges --reverse fixed-branch..<wrong branch> ); do
   git revert -n -m 1 $s

done



Cleaning Up
 
Cleaning up branches


After a branch has been merged to master, there is little reason to keep it around.  Exceptions include large "integration" type branches, e.g: the release branch.  To clean up all the branches merged into master, use this command (use -r for remote branches, -l for local):

git branch -r --merged master


Then go through and delete the branches found:

 git push origin :<branch>

Here's a complete script that does this automatically:

#!/bin/sh

for i in $( git branch -r --merged master ); do
  if [ "$i" != "origin/master" -a "$i" != "origin/release" ]; then
   echo ${i##origin/}

   git push origin :${i##origin/}

  fi
done
git remote prune origin



Francis BrowneSep 8, 2015 9:41 AM



How are branches being used in Nexen for the "simple" use cases (i.e. one developer working on one ticket)?  Do you typically create a branch on the gitlab upstream repository for each fix, and then merge that back to master?  Or are the developers only creating branches on their local repository while they work on a ticket? 

 

If so, can you elaborate on why to use branches at all for this?  Is it just for better naming and a single atomic commit?  Or am I missing something about git?  (I am just learning about branching myself, so I am asking half to solidify my understanding of git and half to learn the Nexen workflow.)

thanks!
David PaytSep 8, 2015 10:38 AM (in response to Francis Browne) 

Some answers to your questions can be found in the Development Workflow. 

All work must be done in branches that are based off the 'master' branch. 'master' branch is the gold standard, and represents the last version to be deployed to production. 'develop' branch is our current solution to Continuous Deployment, when a branch is "completed" then it must be merge-requested into 'develop' which is the automatically deployed to NEXEN development server (https://dev-nexen.bnymellon.com/). Branches can be developed locally, but it is recommended to push your branches so they are hosted in case your laptop dies. There is a branch naming convention.
Branches are useful for various reasons. Features should be encapsulated into a branch. Branches must be code reviewed. Branches, once accepted, make their way into 'master' as part of the Buildmaster Instructions and Release Planning.
Even if there was a major change, then even that would likely get its own branch, with individual sub-features being implemented on branches off that branch.

Feel free to reach out to me on Lync if you require further assistance.
 Like Show 1 Like (1) '
 Actions '
''

3: 


Sure it is possible to have an ssh access without a "git server".
 You need a ssh server (daemon) though.

Don't mix a "remote server" and a "remote (or upstream actually) repo: a remote repo can be a simple directory right next to your current repo (local protocol).

Gitolite is a good illustration, using the forced command mechanism of ssh to manage authorization (not access).
 See Gitolite without SSH to realize that just a sshd is enough for git repo access.

If operating over SSH you don't need a git server. The trick are getting the file permissions correct so that everyone can edit the files.

All the files required by git to run are stored locally to a checkout (in the .git directory). You could just access your git repository over SSH and effectively treat it like a repository on your local machine, e.g by mounting the remote folder locally.

However, I'm not sure why you'd want to do that. You can't do anything useful without the git binaries installed. If you just wanted to use the repository for private versioning, then you might as well install and run in locally, and back it up with your usual backup methods. If you want to use the repository to collaborate with others, then you need the git binaries available on a server that all your collaborators can access.

There is no meaningful distinction between a git "server" and a git "client". It's a distributed versioning system, which means each checkout is a fully-functioning version repository in its own right.

If you're doing this just for yourself, on the server:
 git init --bare

 If you're doing it with other developers then you'll need to:
 mkdir repo
 chgrp GROUP repo
 chmod g+rwxs repo
 cd repo
 git init --bare --shared=group
 


